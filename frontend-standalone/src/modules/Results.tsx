import PieChart from "@/components/PieChart";
import ResultChart from "@/components/ResultChart";
import { OutputType, FormDataType } from "@/types";
import { Box, Divider, Grid2, Paper, Typography } from "@mui/material";
import ExportModal from "./ExportModal";
import { useEffect, useState } from "react";
import { toBlob } from "html-to-image";
import Link from "next/link";
import { getCO2Text, getEventTypeText } from "@/utils";

interface ResultsProps {
  data: OutputType[] | null;
  input: FormDataType;
  pieImages: {
    blob: Blob,
    id: number
  }[];
  chartImages: {
    blob: Blob,
    id: number
  }[];
  setPieImages: React.Dispatch<React.SetStateAction<{
    blob: Blob,
    id: number
  }[]>>;
  setChartImages: React.Dispatch<React.SetStateAction<{
    blob: Blob,
    id: number
  }[]>>;
}

export default function Results({
  data,
  input,
  pieImages,
  chartImages,
  setPieImages,
  setChartImages,
}: ResultsProps) {
  useEffect(() => {
    if (!data) {
      return;
    }

    setTimeout(() => {
      toBlob(document.getElementById("pie-chart_0") as HTMLElement)
        .then((blob) => {
          if (blob) setPieImages(prev => [...prev, {blob: blob, id: 1}]);
        })
        .catch((err) => {
          console.error("Error converting pie chart to blob:", err);
        });

      toBlob(document.getElementById("pie-chart_1") as HTMLElement)
        .then((blob) => {
          if (blob) setPieImages(prev => [...prev, {blob: blob, id: 2}]);
        })
        .catch((err) => {
          console.error("Error converting pie chart to blob:", err);
        });

      toBlob(document.getElementById("pie-chart_2") as HTMLElement)
        .then((blob) => {
          if (blob) setPieImages(prev => [...prev, {blob: blob, id: 3}]);
        })
        .catch((err) => {
          console.error("Error converting pie chart to blob:", err);
        });

      toBlob(document.getElementById("result-chart_0") as HTMLElement)
        .then((blob) => {
          if (blob) setChartImages(prev => [...prev, {blob: blob, id: 1}]);
        })
        .catch((err) => {
          console.error("Error converting chart to blob:", err);
        });

      toBlob(document.getElementById("result-chart_1") as HTMLElement)
        .then((blob) => {
          if (blob) setChartImages(prev => [...prev, {blob: blob, id: 2}]);
        })
        .catch((err) => {
          console.error("Error converting chart to blob:", err);
        });

      toBlob(document.getElementById("result-chart_2") as HTMLElement)
        .then((blob) => {
          if (blob) setChartImages(prev => [...prev, {blob: blob, id: 3}]);
        })
        .catch((err) => {
          console.error("Error converting chart to blob:", err);
        });
    }, 1000);

  }, [data])

  const compareDifference = (result?: number) => {
    if (!data || !result) {
      return 0;
    }

    const og = data[0].total;
    return ((og - result)) * 100;
  };

  const resultComparisonMeat = (result: number) => {
    return (result / 70.6).toFixed(2);
  }

  const resultComparisonHousingTemperature = (result: number) => {
    return Math.ceil(result / 147.2);
  };

  const resultComparisonCar = (result: number) => {
    return Math.ceil(result / 0.1221);
  }

  if (!data || data === null) {
    return <></>;
  }

  return (
    <Paper>
      <Box padding={2}>
        <Grid2 container gap={2} direction={"column"}>
          <Grid2>
            <Typography maxWidth={"820px"} textAlign={"justify"}>
              <p>
                The estimated total CO2 emissions generated by an event of these parameters is <strong>{data[0].total.toFixed(2)}kg</strong>.
              </p>
              <p>
                This is comparable to the effect of approximately{" "}
                {resultComparisonHousingTemperature(data[0].total)} people's
                annual heating and cooling in Finland, according to figures
                provided by the <Link href={"https://ec.europa.eu/eurostat/web/interactive-publications/housing-2024#environmental-impact-of-housing"}>European Union</Link>.
                Alternatively, producing {resultComparisonMeat(data[0].total)}kg of beef results in approximately the same amount of emissions
                (<Link href="https://www.un.org/en/climatechange/science/climate-issues/food">source</Link>).
                Given the average CO2 emissions of 122.1 g/km
                (<Link href="https://www.europarl.europa.eu/topics/en/article/20190313STO31218/co2-emissions-from-cars-facts-and-figures-infographics">source</Link>),
                this would be cover driving a car for appoximately{" "}
                {resultComparisonCar(data[0].total)} kilometers.
              </p>
              <p>
                In most cases, travel is the main contributor to the harmful
                environmental impact of an event, mainly in the form of CO2
                emissions.
                {getCO2Text(input.eventFormat, data)}
              </p>
              <p>
                {getEventTypeText(input.eventType)}
              </p>
              <p>
                The environmental impact of using digital tools, streaming,
                recording and keeping recordings saved in cloud for long periods
                of time, is not nonexistent. Therefore, the necessity of streaming
                on highest quality and storing recordings for long times should be
                taken into consideration.
              </p>
            </Typography>
          </Grid2>

          <Divider flexItem />

          {data.map((result: OutputType, index: number) => (
            <Grid2 key={index} container gap={2} direction={"column"}>
              <Grid2 alignSelf={"center"}>
                <Typography fontWeight={600}>
                  {index === 0
                    ? `Total CO2 emissions (kg): `
                    : index === 1
                      ? `Possible CO2 emissions (kg) for ${result.format} event: `
                      : `Possible CO2 emissions (kg) for ${result.format} event: `}
                  {result.total.toFixed(2)}
                </Typography>
              </Grid2>
              <Grid2>
                <PieChart data={result} id={`pie-chart_${index}`} />
              </Grid2>
              <Grid2>
                <ResultChart data={result} id={`result-chart_${index}`} />
              </Grid2>
            </Grid2>
          ))}
          <Grid2 container justifyContent={"flex-end"}>
            <ExportModal
              formData={input}
              results={data}
              pieImages={pieImages}
              chartImages={chartImages}
            />
          </Grid2>
        </Grid2>
      </Box>
    </Paper>
  );
}
