/* eslint-disable jsx-a11y/alt-text */
import { FormDataType, OutputType } from "@/types";
import { getCO2Text, getEventTypeText, resultComparisonCar, resultComparisonHousingTemperature, resultComparisonMeat } from "@/utils";
import { PictureAsPdf, TextSnippet } from "@mui/icons-material";
import { Box, Button, Modal } from "@mui/material";
import { Document, Image, Link, Page, PDFDownloadLink, PDFViewer as Renderer, StyleSheet, Text, View } from "@react-pdf/renderer";
import { Document as DDocument, ExternalHyperlink, HeadingLevel, ImageRun, Packer, Paragraph, SectionType, TextRun } from "docx";
import { useState } from "react";

const style = StyleSheet.create({
  download: {
    fontFamily: "inherit",
    fontSize: "inherit",
    color: "inherit",
    textDecoration: "none",
  },
  page: {
    flexDirection: "column",
  },
  h1: {
    fontSize: 24,
    fontWeight: "bold",
  },
  bold: {
    fontWeight: "bold",
  },
  subtitle: {
    fontSize: 18,
    textAlign: "center",
  },
  section: {
    margin: 10,
    padding: 10,
    flexGrow: 1,
    fontSize: 12,
  },
  innerBlock: {
    marginTop: 15,
    paddingTop: 15
  },
  smTop: {
    marginTop: 5,
    paddingTop: 5
  },
  smBottom: {
    marginBottom: 5,
    paddingBottom: 5
  },
  viewer: {
    width: "100%",
    height: "100%",
  }
});

function PDFDocument({ images, formData, results }: { images: Blob[], formData: FormDataType, results: OutputType[] }) {
  const doc = (
    <Document>
      <Page size={"A4"} style={style.page}>
        <View style={style.section}>
          <Text style={style.h1}>
            Environmental Sustainability Assessment for Events
          </Text>
          <Text style={style.subtitle}>
            Carbon emission calculation results for an event
          </Text>
          <View style={style.innerBlock}>
            <View style={style.smBottom}>
              <Text>
                Event specifications
              </Text>
            </View>
            <Text>
              Type: {formData.eventType}
            </Text>
            <Text>
              Scope: {formData.eventScope}
            </Text>
            <Text>
              Duration: {formData.eventDuration.dailyDuration} hours for {formData.eventDuration.totalDays} days. Total duration: {formData.eventDuration.totalHours} hours.
            </Text>
            <Text>
              Attendees: {formData.attendees.local} local attendees, {formData.attendees.national} national attendees and {formData.attendees.international} international attendees.
            </Text>
            <Text>
              Transportation: {formData.transport.public / 100 * formData.attendees.total * formData.transport.publicKm}km with public transportation, {formData.transport.cars / 100 * formData.attendees.total * formData.transport.carsKm}km
              with cars, {formData.transport.shortHaulFlights / 100 * formData.attendees.total * formData.transport.shortHaulFlightsKm}km with short haul flights
              and {formData.transport.longHaulFlights / 100 * formData.attendees.total * formData.transport.longHaulFlightsKm}km with long haul flights.
            </Text>
            <Text>
              Overnight stays: {formData.overnightStays.nights} nights for {formData.overnightStays.amount} people.
            </Text>
            <Text>
              Space: {formData.space.size}mÂ² for {formData.space.hours} hours for {formData.space.days} days.
            </Text>
            <Text>
              Food: {formData.food.meatMealsAmount} meat meals and {formData.food.nonMeatMealsAmount} non-meat meals {formData.food.amountPerDay} times per day.
            </Text>
            <Text>
              Coffee: {formData.drink.cupsPerServing * formData.drink.amountPerDay} cups of coffee {formData.drink.amountPerDay} times per day.
            </Text>
            <Text>
              Digital tools: {formData.digitalTools.hoursStreamedPerDay * formData.eventDuration.totalDays} hours streamed per day and {formData.digitalTools.hoursRecordedPerDay * formData.eventDuration.totalDays} hours recorded per day and it {formData.digitalTools.stored ? "will" : "will not"} be stored.
            </Text>
          </View>
          <View style={style.innerBlock}>
            <View style={style.smBottom}>
              <Text>
                Results
              </Text>
            </View>
            <Text>
              The estimated total CO2 emissions generated by an event of these parameters is {results[0].total.toFixed(2)}kg
            </Text>
            <View style={style.smTop}>
              <Text>
                This is comparable to the effect of approximately {resultComparisonHousingTemperature(results[0].total)} people's annual heating and cooling in Finland, according to figures provided by the <Link src="https://ec.europa.eu/eurostat/web/interactive-publications/housing-2024#environmental-impact-of-housing">European Union</Link>. Alternatively, producing ${resultComparisonMeat(results[0].total)}kg of beef results in approximately the same amount of emissions <Link src="https://www.un.org/en/climatechange/science/climate-issues/food">(source)</Link>. Given the average CO2 emissions of 122.1 g/km <Link src="https://www.europarl.europa.eu/topics/en/article/20190313STO31218/co2-emissions-from-cars-facts-and-figures-infographics">(source)</Link>, this would be cover driving a car for appoximately {resultComparisonCar(results[0].total)} kilometers.
              </Text>
            </View>
            <View style={style.smTop}>
              <Text>
                In most cases, travel is the main contributor to the harmful environmental impact of an event, mainly in the form of CO2 emissions. {getCO2Text("eventType", results)}
              </Text>
            </View>
            <View style={style.smTop}>
              <Text>
                {getEventTypeText(formData.eventType)}
              </Text>
            </View>
            <View style={style.smTop}>
              <Text>
                The environmental impact of using digital tools, streaming, recording and keeping recordings saved in cloud for long periods of time, is not nonexistent. Therefore, the necessity of streaming on highest quality and storing recordings for long times should be taken into consideration.
              </Text>
            </View>
          </View>
        </View>
      </Page>
      <Page>
        <View style={style.section}>
          <Text>
            CO2 emissions (kg) for event: {results[0].total.toFixed(2)}
          </Text>
        </View>
        <View style={style.section}>
          <Image src={
            images[0].arrayBuffer().then((buffer) => {
              return Buffer.from(buffer)
            })
          } />
        </View>
        <View style={style.section}>
          <Image src={
            images[3].arrayBuffer().then((buffer) => {
              return Buffer.from(buffer)
            })
          } />
        </View>
      </Page>
      <Page>
        <View style={style.section}>
          <Text>
            Possible CO2 emissions (kg) for {results[1].format} event: {results[1].total.toFixed(2)}
          </Text>
        </View>
        <View style={style.section}>
          <Image src={
            images[1].arrayBuffer().then((buffer) => {
              return Buffer.from(buffer)
            })
          } />
        </View>
        <View style={style.section}>
          <Image src={
            images[4].arrayBuffer().then((buffer) => {
              return Buffer.from(buffer)
            })
          } />
        </View>
      </Page>
      <Page>
        <View style={style.section}>
          <Text>
            Possible CO2 emissions (kg) for {results[2].format} event: {results[2].total.toFixed(2)}
          </Text>
        </View>
        <View style={style.section}>
          <Image src={
            images[2].arrayBuffer().then((buffer) => {
              return Buffer.from(buffer)
            })
          } />
        </View>
        <View style={style.section}>
          <Image src={
            images[5].arrayBuffer().then((buffer) => {
              return Buffer.from(buffer)
            })
          } />
        </View>
      </Page>
    </Document>
  );

  return doc;
}

function renderPDF({ images, formData, results }: { images: Blob[], formData: FormDataType, results: OutputType[] }) {
  return (
    <Renderer style={style.viewer}>
      <PDFDocument images={images} results={results} formData={formData} />
    </Renderer>
  )
}

function getDocxTitleAndResultParagraph(title: string, result: string): Paragraph {
  return new Paragraph({
    children: [
      new TextRun({
        text: title,
        bold: true
      }),
      new TextRun(result)
    ]
  });
}

function getResultTextParagraphs(formData: FormDataType, results: OutputType[]): Paragraph[] {
  return [
    new Paragraph({
      children: [
        new TextRun({
          text: "Results",
          bold: true
        }),
      ]
    }),
    new Paragraph({
      children: [
        new TextRun({
          text: `The estimated total CO2 emissions generated by an event of these parameters is ${results[0].total.toFixed(2)}kg.`,
        }),
        new TextRun({
          text: `This is comparable to the effect of approximately ${resultComparisonHousingTemperature(results[0].total)} people's annual heating and cooling in Finland, according to figures provided by the `,
          break: 1
        }),
        new ExternalHyperlink({
          children: [
            new TextRun({
              text: "European Union.",
              style: "Hyperlink"
            }),
          ],
          link: "https://ec.europa.eu/eurostat/web/interactive-publications/housing-2024#environmental-impact-of-housing"
        }),
        new TextRun({
          text: ` Alternatively, producing ${resultComparisonMeat(results[0].total)}kg of beef results in approximately the same amount of emissions `,
        }),
        new ExternalHyperlink({
          children: [
            new TextRun({
              text: "(source).",
              style: "Hyperlink"
            }),
          ],
          link: "https://www.un.org/en/climatechange/science/climate-issues/food"
        }),
        new TextRun({
          text: `Given the average CO2 emissions of 122.1 g/km`,
        }),
        new ExternalHyperlink({
          children: [
            new TextRun({
              text: "(source)",
              style: "Hyperlink"
            }),
          ],
          link: "https://www.europarl.europa.eu/topics/en/article/20190313STO31218/co2-emissions-from-cars-facts-and-figures-infographics"
        }),
        new TextRun({
          text: `, this would be cover driving a car for approximately ${resultComparisonCar(results[0].total)} kilometers.`,
        }),
      ]
    }),
    new Paragraph({
      children: [
        new TextRun({
          text: `In most cases, travel is the main contributor to the harmful environmental impact of an event, mainly in the form of CO2 emissions.${getCO2Text(formData.eventType, results)}`, // More text conditionally
        }),
      ]
    }),
    new Paragraph({
      children: [
        new TextRun({
          text: getEventTypeText(formData.eventType)
        })
      ]
    }),
    new Paragraph({
      children: [
        new TextRun({
          text: `The environmental impact of using digital tools, streaming, recording and keeping recordings saved in cloud for long periods of time, is not nonexistent. Therefore, the necessity of streaming on highest quality and storing recordings for long times should be taken into consideration.`
        })
      ]
    })
  ];
}

function getChartsParagraphs(images: Buffer[], results: OutputType[], offset: number): Paragraph[] {
  const label = offset === 0 ? `CO2 emissions (kg) for event: ${results[0].total.toFixed(2)}` : `Possible CO2 emissions (kg) for ${results[offset].format} event: ${results[offset].total.toFixed(2)}`;

  return ([
    new Paragraph({
      children: [
        new TextRun({
          text: label,
          bold: true
        }),
        new ImageRun({
          type: "png",
          data: images[0 + offset],
          transformation: {
            width: 620,
            height: 250
          },
        }),
        new ImageRun({
          type: "png",
          data: images[3 + offset],
          transformation: {
            width: 620,
            height: 481
          }
        }),
      ]
    }),
  ]);
}

async function DocxDocument({ images, formData, results }: { images: Blob[], formData: FormDataType, results: OutputType[] }) {
  const imageBuffers = await Promise.all(images.map(async (image) => {
    const buffer = await image.arrayBuffer();
    return Buffer.from(buffer);
  }));

  return new DDocument({
    sections: [
      {
        properties: {},
        children: [
          new Paragraph({
            children: [
              new TextRun("Environmental Sustainability Assessment for Events"),
            ],
            alignment: "center",
            heading: HeadingLevel.HEADING_1
          }),
          new Paragraph({
            children: [
              new TextRun("Carbon emission calculation results for event"),
            ],
            alignment: "center",
            heading: HeadingLevel.HEADING_3
          }),
          new Paragraph({
            children: [
              new TextRun({
                text: "Event specifications",
                bold: true
              }),
            ],
          }),
          getDocxTitleAndResultParagraph("Type: ", formData.eventType),
          getDocxTitleAndResultParagraph("Scope: ", formData.eventScope),
          getDocxTitleAndResultParagraph("Duration: ", `${formData.eventDuration.dailyDuration} hours for ${formData.eventDuration.totalDays} days. Total duration: ${formData.eventDuration.totalHours} hours.`),
          getDocxTitleAndResultParagraph("Attendees: ", `${formData.attendees.local} local attendees, ${formData.attendees.national} national attendees and ${formData.attendees.international} international attendees.`),
          getDocxTitleAndResultParagraph("Transportation: ", `${formData.transport.public / 100 * formData.attendees.total * formData.transport.publicKm}km with public transportation, ${formData.transport.cars / 100 * formData.attendees.total * formData.transport.carsKm}km with cars, ${formData.transport.shortHaulFlights / 100 * formData.attendees.total * formData.transport.shortHaulFlightsKm}km with short haul flights and ${formData.transport.longHaulFlights / 100 * formData.attendees.total * formData.transport.longHaulFlightsKm}km with long haul flights.`),
          getDocxTitleAndResultParagraph("Overnight stays: ", `${formData.overnightStays.nights} nights for ${formData.overnightStays.amount} people.`),
          getDocxTitleAndResultParagraph("Space: ", `${formData.space.size}mÂ² for ${formData.space.hours} hours for ${formData.space.days} days.`),
          getDocxTitleAndResultParagraph("Food: ", `${formData.food.meatMealsAmount} meat meals and ${formData.food.nonMeatMealsAmount} non-meat meals ${formData.food.amountPerDay} times per day.`),
          getDocxTitleAndResultParagraph("Coffee: ", `${formData.drink.cupsPerServing * formData.drink.amountPerDay} cups of coffee ${formData.drink.amountPerDay} times per day.`),
          getDocxTitleAndResultParagraph("Digital tools: ", `${formData.digitalTools.hoursStreamedPerDay * formData.eventDuration.totalDays} hours streamed per day and ${formData.digitalTools.hoursRecordedPerDay * formData.eventDuration.totalDays} hours recorded per day and it ${formData.digitalTools.stored ? "will" : "will not"} be stored.`),
          ...getResultTextParagraphs(formData, results),
        ]
      },
      {
        properties: {
          type: SectionType.NEXT_PAGE
        },
        children: getChartsParagraphs(imageBuffers, results, 0)
      },
      {
        properties: {
          type: SectionType.NEXT_PAGE
        },
        children: getChartsParagraphs(imageBuffers, results, 1)
      },
      {
        properties: {
          type: SectionType.NEXT_PAGE
        },
        children: getChartsParagraphs(imageBuffers, results, 2)
      }
    ]
  });
}

interface ExportModalProps {
  formData: FormDataType;
  results: OutputType[];
  images: Blob[];
}

export default function ExportModal({
  formData,
  results,
  images
}: ExportModalProps) {
  const [showPDF, setShowPDF] = useState(false);

  const showPDFDownloadStatus = (loading: boolean): any => {
    return (
      <div>{loading ? "Loading document..." : "Download as PDF file"}</div>
    )
  }

  return (
    <>
      <Button
        onClick={() => setShowPDF(true)}
        variant="outlined"
      >
        Export as file
      </Button>

      <Modal
        open={showPDF}
        onClose={() => setShowPDF(false)}
      >
        <Box
          sx={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            width: "80vw",
            height: "80vh",
            bgcolor: "background.paper",
            boxShadow: 24
          }}
        >
          <Box
            sx={{
              padding: 1,
              display: "flex",
              justifyContent: "center",
              "& > *": {
                margin: 1
              }
            }}
          >
            <Button variant="outlined" endIcon={<PictureAsPdf />}>
              <PDFDownloadLink
                document={<PDFDocument images={images} results={results} formData={formData} />}
                fileName={`DigiSus-emission_tool.pdf`}
                style={style.download}
              >
                {/* @ts-expect-error - Package bug */}
                {({ loading }) => showPDFDownloadStatus(loading)}
              </PDFDownloadLink>
            </Button>
            <Button
              variant="outlined"
              endIcon={<TextSnippet />}
              onClick={async () => Packer.toBlob(await DocxDocument({ images: images, formData: formData, results: results })).then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement("a");
                a.href = url;
                a.download = "DigiSus-emission_tool.docx";
                a.click();
              })}
            >
              Download as DOCX file
            </Button>

          </Box>
          {renderPDF({ images, formData, results })}
        </Box>
      </Modal>
    </>
  )
}
